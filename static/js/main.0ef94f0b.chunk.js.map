{"version":3,"sources":["components/cc.jpg","components/Header.js","components/Dasboard.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","styles","makeStyles","nav","color","backgroundColor","width","height","navwrapper","display","justifyContent","brand","fontSize","padding","textDecoration","Header","classes","className","href","class","style","table","borderCollapse","borderSpacing","boxSizing","fontFamily","bold","textAlign","row","borderBottom","Dasboard","state","post","axios","get","then","res","data","Countries","setState","src","pic","alt","this","map","key","Country","TotalConfirmed","TotalRecovered","TotalDeaths","Component","App","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"wGAAAA,EAAOC,QAAU,IAA0B,gC,qJCGrCC,EAAOC,YAAW,CACxBC,IAAI,CACAC,MAAO,OACPC,gBAAiB,UACjBC,MAAO,OACPC,OAAQ,QAEZC,WAAW,CACPC,QAAS,OACTC,eAAe,UAEnBC,MAAM,CACFP,MAAM,OACNK,QAAS,eACTG,SAAU,SACVC,QAAS,IACTC,eAAgB,UAGL,SAASC,IACpB,IAAMC,EAAQf,IACd,OAES,yBAAKgB,UAAWD,EAAQb,KACrB,yBAAKc,UAAWD,EAAQR,YACpB,uBAAGU,KAAK,IAAIC,MAAOH,EAAQL,OAA3B,gB,qFCxBdS,EAAMlB,YAAW,CACrBmB,MAAM,CACJf,MAAO,OACPG,QAAS,QACTa,eAAgB,WAChBC,cAAe,IACfC,UAAW,UACXC,WAAY,YAEdC,KAAK,CACHC,UAAU,QAGZC,IAAI,CACFC,aAAc,sBACdhB,QAAS,qBAIQiB,E,4MACnBC,MAAM,CACFC,KAAK,I,kEAEW,IAAD,OACdC,IAAMC,IAAI,sCACRC,MAAK,SAAAC,GAEF,IAAMJ,EAAKI,EAAIC,KAAKC,UAEpB,EAAKC,SAAS,CACVP,c,+BAOV,IAAMhB,EAAQI,IAEZ,OAEI,6BAEG,yBAAKoB,IAAKC,IAAKC,IAAI,WAAWtB,MAAO,CAACd,MAAM,UAC5C,wBAAIW,UAAU,UAAd,kBACA,2BAAOA,UAAWD,EAAQK,OACjC,+BACE,4BACI,oCACA,qCACA,yCACA,wCAKN,+BAGMsB,KAAKZ,MAAMC,KAAKY,KAAI,SAAChB,GAAD,OACpB,wBAAIiB,IAAKjB,EAAIkB,SACX,4BAAKlB,EAAIkB,SACT,4BAAKlB,EAAImB,eAAT,MACA,4BAAKnB,EAAIoB,eAAT,KACA,4BAAKpB,EAAIqB,wB,GA7CaC,aCFvBC,MAdf,WACE,OACE,kBAAC,IAAD,KACA,yBAAKlC,UAAU,OACb,kBAACF,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOqC,KAAK,IAAIC,UAAWvB,QCDfwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/B,MAAK,SAAAgC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0ef94f0b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cc.26166282.jpg\";","import React from 'react'\r\n\r\nimport {makeStyles} from '@material-ui/core'\r\nconst styles=makeStyles({\r\nnav:{\r\n    color: '#fff',\r\n    backgroundColor: '#ee6e73',\r\n    width: '100%',\r\n    height: '56px'\r\n},\r\nnavwrapper:{\r\n    display: 'flex',\r\n    justifyContent:'center'\r\n},\r\nbrand:{\r\n    color:'#fff',\r\n    display: 'inline-block',\r\n    fontSize: '2.1rem',\r\n    padding: '0',\r\n    textDecoration: 'none'\r\n}\r\n})\r\nexport default function Header() {\r\n    const classes=styles()\r\n    return (\r\n        \r\n             <nav className={classes.nav}>\r\n                <div className={classes.navwrapper}>\r\n                    <a href=\"#\" class={classes.brand}>Covid-Info</a>\r\n                    {/* <ul id=\"nav-mobile\" class=\"right hide-on-med-and-down\">\r\n                        <Link to=\"/india\">\r\n                            India\r\n                        </Link>\r\n                    </ul> */}\r\n                </div>\r\n            </nav>\r\n        \r\n    )\r\n}\r\n","import React, { Component } from 'react'\r\nimport axios from  'axios'\r\nimport pic from './cc.jpg'\r\nimport {makeStyles} from '@material-ui/core'\r\nconst style=makeStyles({\r\n  table:{\r\n    width: '100%',\r\n    display: 'table',\r\n    borderCollapse: 'collapse',\r\n    borderSpacing: '0',\r\n    boxSizing: 'inherit',\r\n    fontFamily: 'Segoe UI'\r\n  },\r\n  bold:{\r\n    textAlign:'left',\r\n\r\n  },\r\n  row:{\r\n    borderBottom: '1px solid lightgray',\r\n    padding: '3px 0px 3px 0px'\r\n  }\r\n})\r\n\r\nexport default class Dasboard extends Component {\r\n  state={\r\n      post:[]\r\n  }\r\n  componentDidMount(){\r\n       axios.get('https://api.covid19api.com/summary' )\r\n        .then(res=>{\r\n            // console.log(res.data)\r\n            const post=res.data.Countries\r\n            \r\n            this.setState({\r\n                post\r\n            })\r\n        })\r\n    \r\n    }\r\n    \r\n    render() {\r\n      const classes=style()\r\n       \r\n        return (\r\n          \r\n            <div>\r\n               \r\n               <img src={pic} alt=\"Covid-19\" style={{width:'100%'}}></img>\r\n               <h1 className=\"center\">Covid-19 Stats</h1> \r\n               <table className={classes.table}>\r\n        <thead>\r\n          <tr>\r\n              <th >Name</th>\r\n              <th>Total</th>\r\n              <th >Recovered</th>\r\n              <th >Deaths</th>\r\n              \r\n          </tr>\r\n        </thead>\r\n       \r\n        <tbody>\r\n          {\r\n            \r\n              this.state.post.map((row)=>(\r\n              <tr key={row.Country}>\r\n                <td>{row.Country}</td>\r\n                <td>{row.TotalConfirmed}  </td>\r\n                <td>{row.TotalRecovered} </td>\r\n                <td>{row.TotalDeaths}</td>\r\n              </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n","import React from 'react';\nimport Header from './components/Header';\nimport {BrowserRouter as Router, Switch,Route} from 'react-router-dom'\nimport Dasboard from './components/Dasboard';\n// import India from './components/India'\n\n\nfunction App() {\n  return (\n    <Router>\n    <div className=\"App\">\n      <Header/>\n      <Switch>\n        <Route path=\"/\" component={Dasboard}></Route>\n        {/* <Route path=\"/india\" component={India}></Route> */}\n      </Switch>\n    </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}