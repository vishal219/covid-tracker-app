{"version":3,"sources":["components/cc.jpg","components/Header.js","components/Dasboard.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","styles","makeStyles","nav","color","backgroundColor","width","height","navwrapper","display","justifyContent","brand","fontSize","padding","textDecoration","Header","classes","className","href","class","Dasboard","state","post","overall","axios","get","then","res","data","Countries","Global","setState","this","props","src","pic","alt","style","container","card","small","big","TotalConfirmed","recovered","TotalRecovered","deaths","TotalDeaths","NewConfirmed","map","row","key","Country","Component","withStyles","theme","margin","flexWrap","flexDirection","breakpoints","down","marginBottom","backgroundImage","textAlign","App","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1d5efae2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cc.26166282.jpg\";","import React from 'react'\r\nimport {makeStyles} from '@material-ui/core'\r\n\r\nconst styles=makeStyles({\r\nnav:{\r\n    color: '#fff',\r\n    backgroundColor: '#ee6e73',\r\n    width: '100%',\r\n    height: '56px'\r\n},\r\nnavwrapper:{\r\n    display: 'flex',\r\n    justifyContent:'center'\r\n},\r\nbrand:{\r\n    color:'#fff',\r\n    display: 'inline-block',\r\n    fontSize: '2.1rem',\r\n    padding: '0',\r\n    textDecoration: 'none'\r\n}\r\n})\r\nexport default function Header() {\r\n    const classes=styles()\r\n    return (\r\n        \r\n             <nav className={classes.nav}>\r\n                <div className={classes.navwrapper}>\r\n                    <a href=\"#\" class={classes.brand}>Covid-Info</a>\r\n                    {/* <ul id=\"nav-mobile\" class=\"right hide-on-med-and-down\">\r\n                        <Link to=\"/india\">\r\n                            India\r\n                        </Link>\r\n                    </ul> */}\r\n                </div>\r\n            </nav>\r\n        \r\n    )\r\n}\r\n","import React, { Component } from 'react'\r\nimport axios from  'axios'\r\nimport pic from './cc.jpg'\r\nimport {withStyles} from '@material-ui/core/styles'\r\n\r\nconst styles=theme=>({\r\n  container:{\r\n    width:\"90%\",\r\n    display:\"flex\",\r\n    justifyContent:\"space-between\",\r\n    margin:\"0 auto\",\r\n    flexWrap:\"wrap\"\r\n  },\r\n  card:{\r\n    padding:\"20px\",\r\n    backgroundColor:\"#a8b9cf\",\r\n    display:\"flex\",\r\n    flexDirection:\"column\",\r\n    justifyContent:\"center\",\r\n    color:\"white\",\r\n    width:\"20%\",\r\n    [theme.breakpoints.down('sm')]:{\r\n      width:\"30%\",\r\n      margin:\"0 auto\",\r\n      marginBottom:\"10px\",\r\n      padding:\"10px\"  \r\n    },\r\n    borderRadius:\"6%\"\r\n  },\r\n  recovered:{\r\n    backgroundColor:\"#276749\",\r\n    backgroundImage:\"none\"\r\n  },\r\n  deaths:{\r\n    backgroundColor:\"#ff3333\",\r\n    backgroundImage:\"none\"\r\n  },\r\n  big:{\r\n    fontSize:\"40px\",\r\n    padding:\"0px\",\r\n    [theme.breakpoints.down('sm')]:{\r\n      fontSize: \"20px\",\r\n    },\r\n\r\n  },\r\n  small:{\r\n    textAlign:\"center\",\r\n    padding:\"0px\",\r\n    [theme.breakpoints.down('sm')]:{\r\n      fontSize: \"15px\",\r\n    },\r\n  }\r\n})\r\n\r\nclass Dasboard extends Component {\r\n  \r\n  state={\r\n      post:[],\r\n      overall:[]\r\n  }\r\n  componentDidMount(){\r\n       axios.get('https://api.covid19api.com/summary' )\r\n        .then(res=>{\r\n            // console.log(res.data)\r\n            const post=res.data.Countries\r\n            const overall=res.data.Global\r\n            this.setState({\r\n                post,overall\r\n            })\r\n        })\r\n    \r\n    }\r\n   \r\n    render() {\r\n      const {classes}=this.props\r\n       \r\n        return (\r\n          \r\n            <div>\r\n               \r\n               <img src={pic} alt=\"Covid-19\" style={{width:'100%'}}></img>\r\n               <div className={classes.container}>\r\n                <div className={classes.card}>\r\n                  <h2 className={classes.small}>Total</h2>\r\n                  <p className={classes.big}>{this.state.overall.TotalConfirmed}</p>\r\n                </div>\r\n                <div className={`${classes.card} ${classes.recovered}`}>\r\n                  <h2 className={classes.small}>Recovered</h2>\r\n                  <p className={classes.big}>{this.state.overall.TotalRecovered}</p>\r\n                </div>\r\n                <div className={`${classes.card} ${classes.deaths}`}>\r\n                  <h2 className={classes.small}>Deaths</h2>\r\n                  <p className={classes.big}>{this.state.overall.TotalDeaths}</p>\r\n                </div>\r\n                <div className={`${classes.card} ${classes.deaths}`}>\r\n                  <h2 className={classes.small}>New Cases</h2>\r\n                  <p className={classes.big}>{this.state.overall.NewConfirmed}</p>\r\n                </div>\r\n               </div>\r\n               <h1 className=\"center\">Covid-19 Stats</h1> \r\n               <table >\r\n        <thead>\r\n          <tr>\r\n              <th >Name</th>\r\n              <th>Total</th>\r\n              <th >Recovered</th>\r\n              <th >Deaths</th>\r\n              \r\n          </tr>\r\n        </thead>\r\n       \r\n        <tbody>\r\n          {\r\n            \r\n              this.state.post.map((row)=>(\r\n              <tr key={row.Country}>\r\n                <td>{row.Country}</td>\r\n                <td>{row.TotalConfirmed}  </td>\r\n                <td>{row.TotalRecovered} </td>\r\n                <td>{row.TotalDeaths}</td>\r\n              </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default withStyles(styles)(Dasboard)","import React from 'react';\nimport Header from './components/Header';\nimport {BrowserRouter as Router, Switch,Route} from 'react-router-dom'\nimport Dasboard from './components/Dasboard';\n// import India from './components/India'\n\n\nfunction App() {\n  return (\n    <Router>\n    <div className=\"App\">\n      <Header/>\n      <Switch>\n        <Route path=\"/\" component={Dasboard}></Route>\n        {/* <Route path=\"/india\" component={India}></Route> */}\n      </Switch>\n    </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}